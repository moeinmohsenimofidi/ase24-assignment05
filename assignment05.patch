diff --git a/api/src/main/java/de/unibayreuth/se/taskboard/api/controller/UserController.java b/api/src/main/java/de/unibayreuth/se/taskboard/api/controller/UserController.java
index b698136..7c71547 100644
--- a/api/src/main/java/de/unibayreuth/se/taskboard/api/controller/UserController.java
+++ b/api/src/main/java/de/unibayreuth/se/taskboard/api/controller/UserController.java
@@ -1,11 +1,31 @@
 package de.unibayreuth.se.taskboard.api.controller;
 
 import io.swagger.v3.oas.annotations.OpenAPIDefinition;
+import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.info.Info;
+import io.swagger.v3.oas.annotations.media.Content;
+import io.swagger.v3.oas.annotations.media.Schema;
+import io.swagger.v3.oas.annotations.responses.ApiResponse;
 import io.swagger.v3.oas.annotations.tags.Tag;
+import jakarta.validation.Valid;
 import lombok.RequiredArgsConstructor;
+
+import java.util.List;
+import java.util.UUID;
+
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
 import org.springframework.stereotype.Controller;
 import org.springframework.web.bind.annotation.*;
+import org.springframework.web.server.ResponseStatusException;
+
+import de.unibayreuth.se.taskboard.api.dtos.TaskDto;
+import de.unibayreuth.se.taskboard.api.dtos.UserDto;
+import de.unibayreuth.se.taskboard.api.mapper.UserDtoMapper;
+import de.unibayreuth.se.taskboard.business.exceptions.MalformedRequestException;
+import de.unibayreuth.se.taskboard.business.exceptions.TaskNotFoundException;
+import de.unibayreuth.se.taskboard.business.exceptions.UserNotFoundException;
+import de.unibayreuth.se.taskboard.business.ports.UserService;
 
 @OpenAPIDefinition(
         info = @Info(
@@ -18,7 +38,88 @@ import org.springframework.web.bind.annotation.*;
 @RequestMapping("/api/users")
 @RequiredArgsConstructor
 public class UserController {
-    // TODO: Add GET /api/users endpoint to retrieve all users.
-    // TODO: Add GET /api/users/{id} endpoint to retrieve a user by ID.
-    // TODO: Add POST /api/users endpoint to create a new user based on a provided user DTO.
+    private final UserService userService;
+    private final UserDtoMapper userDtoMapper;
+
+    @Operation(
+            summary = "Get all users.",
+            responses = {
+                    @ApiResponse(
+                            responseCode = "200",
+                            content = @Content(
+                                    mediaType = "application/json",
+                                    schema = @Schema(type = "array", implementation = UserDto.class)
+                            ),
+                            description = "All users as a JSON array."
+                    )
+            }
+    )
+    @GetMapping
+    public ResponseEntity<List<UserDto>> getAll() {
+        return ResponseEntity.ok(
+                userService.getAll().stream()
+                        .map(userDtoMapper::fromBusiness)
+                        .toList()
+        );
+    }
+
+    @Operation(
+            summary = "Get user by ID.",
+            responses = {
+                    @ApiResponse(
+                            responseCode = "200",
+                            content = @Content(
+                                    mediaType = "application/json",
+                                    schema = @Schema(implementation = UserDto.class)
+                            ),
+                            description = "The user with the provided ID as a JSON object."
+                    ),
+                    @ApiResponse(
+                            responseCode = "400",
+                            description = "No user with the provided ID could not be found."
+                    )
+            }
+    )
+    @GetMapping("/{id}")
+    public ResponseEntity<UserDto> getById(@PathVariable UUID id) {
+        try {
+            return ResponseEntity.ok(
+                    userDtoMapper.fromBusiness(userService.getById(id))
+            );
+        } catch (UserNotFoundException e) {
+            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, e.getMessage(), e);
+        }
+    }
+    
+    @Operation(
+            summary = "Creates a new user.",
+            responses = {
+                    @ApiResponse(
+                            responseCode = "200",
+                            content = @Content(
+                                    mediaType = "application/json",
+                                    schema = @Schema(implementation = UserDto.class)
+                            ),
+                            description = "The new user as a JSON object."
+                    ),
+                    @ApiResponse(
+                            responseCode = "400",
+                            description = "ID present or user with the provided user ID could not be found."
+                    )
+            }
+    )
+    @PostMapping
+    public ResponseEntity<UserDto> create(@RequestBody @Valid UserDto userDto) {
+        try {
+            return ResponseEntity.ok(
+                    userDtoMapper.fromBusiness(
+                            userService.create(
+                                    userDtoMapper.toBusiness(userDto)
+                            )
+                    )
+            );
+        } catch (MalformedRequestException e) {
+            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, e.getMessage(), e);
+        }
+    }
 }
diff --git a/api/src/main/java/de/unibayreuth/se/taskboard/api/dtos/UserDto.java b/api/src/main/java/de/unibayreuth/se/taskboard/api/dtos/UserDto.java
index fe55fc4..d1b4fb6 100644
--- a/api/src/main/java/de/unibayreuth/se/taskboard/api/dtos/UserDto.java
+++ b/api/src/main/java/de/unibayreuth/se/taskboard/api/dtos/UserDto.java
@@ -1,5 +1,21 @@
 package de.unibayreuth.se.taskboard.api.dtos;
 
-//TODO: Add DTO for users.
-public record UserDto(
-) { }
+import java.time.LocalDateTime;
+import java.util.UUID;
+
+import jakarta.annotation.Nullable;
+import jakarta.validation.constraints.NotNull;
+import lombok.Data;
+
+/**
+ * DTO for user metadata.
+ */
+@Data
+public class UserDto {
+        @Nullable
+        private final UUID id; // user id is null when creating or update a new user
+        @Nullable
+        private final LocalDateTime createdAt; // is null when using DTO to create or update a new user
+        @NotNull
+        private final String name;
+}
diff --git a/api/src/main/java/de/unibayreuth/se/taskboard/api/mapper/TaskDtoMapper.java b/api/src/main/java/de/unibayreuth/se/taskboard/api/mapper/TaskDtoMapper.java
index e40ab9c..71ea9ef 100644
--- a/api/src/main/java/de/unibayreuth/se/taskboard/api/mapper/TaskDtoMapper.java
+++ b/api/src/main/java/de/unibayreuth/se/taskboard/api/mapper/TaskDtoMapper.java
@@ -9,6 +9,8 @@ import org.mapstruct.Mapping;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 
+import de.unibayreuth.se.taskboard.business.ports.UserService;
+
 import java.time.LocalDateTime;
 import java.time.ZoneId;
 import java.util.UUID;
@@ -17,36 +19,31 @@ import java.util.UUID;
 @ConditionalOnMissingBean // prevent IntelliJ warning about duplicate beans
 @NoArgsConstructor
 public abstract class TaskDtoMapper {
-    //TODO: Fix this mapper after resolving the other TODOs.
-
-//    @Autowired
-//    private UserService userService;
+    @Autowired
+    private UserService userService;
     @Autowired
     private UserDtoMapper userDtoMapper;
 
     protected boolean utcNowUpdated = false;
     protected LocalDateTime utcNow;
 
-    //@Mapping(target = "assignee", expression = "java(getUserById(source.getAssigneeId()))")
-    @Mapping(target = "assignee", ignore = true)
+    @Mapping(target = "assignee", expression = "java(getUserById(source.getAssigneeId()))")
     public abstract TaskDto fromBusiness(Task source);
 
-    //@Mapping(target = "assigneeId", source = "assignee.id")
-    @Mapping(target = "assigneeId", ignore = true)
+    @Mapping(target = "assigneeId", source = "assignee.id")
     @Mapping(target = "status", source = "status", defaultValue = "TODO")
     @Mapping(target = "createdAt", expression = "java(mapTimestamp(source.getCreatedAt()))")
     @Mapping(target = "updatedAt", expression = "java(mapTimestamp(source.getUpdatedAt()))")
     public abstract Task toBusiness(TaskDto source);
 
     protected UserDto getUserById(UUID userId) {
-//        if (userId == null) {
-//            return null;
-//        }
-//        return userService.getById(userId).map(userDtoMapper::fromBusiness).orElse(null);
-        return null;
+        if (userId == null) {
+            return null;
+        }
+        return userDtoMapper.fromBusiness(userService.getById(userId));
     }
 
-    protected LocalDateTime mapTimestamp (LocalDateTime timestamp) {
+    protected LocalDateTime mapTimestamp(LocalDateTime timestamp) {
         if (timestamp == null) {
             // ensure that createdAt and updatedAt use exactly the same timestamp
             if (!utcNowUpdated) {
@@ -60,4 +57,3 @@ public abstract class TaskDtoMapper {
         return timestamp;
     }
 }
-
diff --git a/api/src/main/java/de/unibayreuth/se/taskboard/api/mapper/UserDtoMapper.java b/api/src/main/java/de/unibayreuth/se/taskboard/api/mapper/UserDtoMapper.java
index 4410072..e7c4bca 100644
--- a/api/src/main/java/de/unibayreuth/se/taskboard/api/mapper/UserDtoMapper.java
+++ b/api/src/main/java/de/unibayreuth/se/taskboard/api/mapper/UserDtoMapper.java
@@ -16,11 +16,9 @@ import java.time.ZoneId;
 public abstract class UserDtoMapper {
     public abstract UserDto fromBusiness(User source);
 
-    //TODO: Fix this mapper after resolving the other TODOs.
-    @Mapping(target = "id", ignore = true)
-    @Mapping(target = "name", ignore = true)
-    @Mapping(target = "createdAt", ignore = true)
-    //@Mapping(target = "createdAt", expression = "java(mapTimestamp(source.getCreatedAt()))")
+    @Mapping(target = "id", source = "id")
+    @Mapping(target = "name", source = "name")
+    @Mapping(target = "createdAt", expression = "java(mapTimestamp(source.getCreatedAt()))")
     public abstract User toBusiness(UserDto source);
 
     protected LocalDateTime mapTimestamp (LocalDateTime timestamp) {
diff --git a/application/src/main/java/de/unibayreuth/se/taskboard/LoadInitialData.java b/application/src/main/java/de/unibayreuth/se/taskboard/LoadInitialData.java
index 9ec7206..9e0bae3 100644
--- a/application/src/main/java/de/unibayreuth/se/taskboard/LoadInitialData.java
+++ b/application/src/main/java/de/unibayreuth/se/taskboard/LoadInitialData.java
@@ -1,7 +1,9 @@
 package de.unibayreuth.se.taskboard;
 
 import de.unibayreuth.se.taskboard.business.domain.Task;
+import de.unibayreuth.se.taskboard.business.domain.User;
 import de.unibayreuth.se.taskboard.business.ports.TaskService;
+import de.unibayreuth.se.taskboard.business.ports.UserService;
 import lombok.RequiredArgsConstructor;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.beans.factory.InitializingBean;
@@ -19,22 +21,21 @@ import java.util.List;
 @Profile("dev")
 class LoadInitialData implements InitializingBean {
     private final TaskService taskService;
-    // TODO: Fix this class after resolving the other TODOs.
-    //private final UserService userService;
+    private final UserService userService;
 
     @Override
     public void afterPropertiesSet() {
         log.info("Deleting existing data...");
-        //userService.clear();
+        userService.clear();
         taskService.clear();
         log.info("Loading initial data...");
-        //List<User> users = TestFixtures.createUsers(userService);
+        List<User> users = TestFixtures.createUsers(userService);
         List<Task> tasks = TestFixtures.createTasks(taskService);
         Task task1 = tasks.getFirst();
-        //task1.setAssigneeId(users.getFirst().getId());
+        task1.setAssigneeId(users.getFirst().getId());
         taskService.upsert(task1);
         Task task2 = tasks.getLast();
-        //task2.setAssigneeId(users.getLast().getId());
+        task2.setAssigneeId(users.getLast().getId());
         taskService.upsert(task2);
     }
 }
\ No newline at end of file
diff --git a/application/src/main/java/de/unibayreuth/se/taskboard/TestFixtures.java b/application/src/main/java/de/unibayreuth/se/taskboard/TestFixtures.java
index b075082..42d7212 100644
--- a/application/src/main/java/de/unibayreuth/se/taskboard/TestFixtures.java
+++ b/application/src/main/java/de/unibayreuth/se/taskboard/TestFixtures.java
@@ -35,12 +35,10 @@ public class TestFixtures {
     }
 
     public static List<User> createUsers(UserService userService) {
-        // TODO: Fix this after resolving the other TODOs.
-//        return USERS.stream()
-//                .map(SerializationUtils::clone) // prevent issues when tests modify the fixture objects
-//                .map(userService::create)
-//                .collect(Collectors.toList());
-        return List.of();
+       return USERS.stream()
+               .map(SerializationUtils::clone) // prevent issues when tests modify the fixture objects
+               .map(userService::create)
+               .collect(Collectors.toList());
     }
 
     public static List<Task> createTasks(TaskService taskService) {
diff --git a/application/src/test/java/de/unibayreuth/se/taskboard/AbstractSystemTest.java b/application/src/test/java/de/unibayreuth/se/taskboard/AbstractSystemTest.java
index efb6031..ab170de 100644
--- a/application/src/test/java/de/unibayreuth/se/taskboard/AbstractSystemTest.java
+++ b/application/src/test/java/de/unibayreuth/se/taskboard/AbstractSystemTest.java
@@ -1,6 +1,7 @@
 package de.unibayreuth.se.taskboard;
 
 import de.unibayreuth.se.taskboard.business.ports.TaskService;
+import de.unibayreuth.se.taskboard.business.ports.UserService;
 import io.restassured.RestAssured;
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.BeforeAll;
@@ -38,8 +39,8 @@ public abstract class AbstractSystemTest {
         registry.add("spring.datasource.password", postgres::getPassword);
     }
 
-    //@Autowired
-    //protected UserService userService;
+    @Autowired
+    protected UserService userService;
 
     @Autowired
     protected TaskService taskService;
@@ -51,6 +52,6 @@ public abstract class AbstractSystemTest {
     void setUp() {
         RestAssured.baseURI = "http://localhost:" + port;
         taskService.clear();
-        //userService.clear();
+        userService.clear();
     }
 }
\ No newline at end of file
diff --git a/application/src/test/java/de/unibayreuth/se/taskboard/TaskBoardSystemTests.java b/application/src/test/java/de/unibayreuth/se/taskboard/TaskBoardSystemTests.java
index 05af92c..56cf427 100644
--- a/application/src/test/java/de/unibayreuth/se/taskboard/TaskBoardSystemTests.java
+++ b/application/src/test/java/de/unibayreuth/se/taskboard/TaskBoardSystemTests.java
@@ -1,18 +1,22 @@
 package de.unibayreuth.se.taskboard;
 
 import de.unibayreuth.se.taskboard.api.dtos.TaskDto;
+import de.unibayreuth.se.taskboard.api.dtos.UserDto;
 import de.unibayreuth.se.taskboard.api.mapper.TaskDtoMapper;
 import de.unibayreuth.se.taskboard.business.domain.Task;
+import de.unibayreuth.se.taskboard.business.domain.User;
 import io.restassured.http.ContentType;
 import org.junit.jupiter.api.Test;
 import org.springframework.beans.factory.annotation.Autowired;
 
 import java.util.List;
+import java.util.UUID;
 
 import static io.restassured.RestAssured.given;
 import static io.restassured.RestAssured.when;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.hamcrest.Matchers.hasSize;
+import static org.hamcrest.Matchers.equalTo;
 
 
 public class TaskBoardSystemTests extends AbstractSystemTest {
@@ -45,7 +49,7 @@ public class TaskBoardSystemTests extends AbstractSystemTest {
     @Test
     void createAndDeleteTask() {
         Task createdTask = taskService.create(
-                TestFixtures.getTasks().getFirst()
+                TestFixtures.getTasks().get(0)
         );
 
         when()
@@ -65,5 +69,78 @@ public class TaskBoardSystemTests extends AbstractSystemTest {
 
     }
 
-    //TODO: Add at least one test for each new endpoint in the users controller (the create endpoint can be tested as part of the other endpoints).
+    @Test
+    void getAllUsers() {
+        // Create users using TestFixtures
+        List<User> createdUsers = TestFixtures.createUsers(userService);
+
+        // Get all users and verify
+        given()
+            .contentType(ContentType.JSON)
+            .when()
+            .get("/api/users")
+            .then()
+            .statusCode(200)
+            .body(".", hasSize(createdUsers.size()))
+            .body("[0].name", org.hamcrest.Matchers.anyOf(
+                org.hamcrest.Matchers.equalTo("Alice"),
+                org.hamcrest.Matchers.equalTo("Bob"),
+                org.hamcrest.Matchers.equalTo("Charlie")))
+            .body("[1].name", org.hamcrest.Matchers.anyOf(
+                org.hamcrest.Matchers.equalTo("Alice"),
+                org.hamcrest.Matchers.equalTo("Bob"),
+                org.hamcrest.Matchers.equalTo("Charlie")));
+    }
+
+    @Test
+    void getUserById() {
+        // Create a user using TestFixtures
+        User user = userService.create(TestFixtures.getUsers().get(0));
+        
+        // Get the user by ID and verify
+        given()
+            .contentType(ContentType.JSON)
+            .when()
+            .get("/api/users/{id}", user.getId())
+            .then()
+            .statusCode(200)
+            .body("name", equalTo("Alice"));
+
+        // Try to get non-existent user
+        given()
+            .contentType(ContentType.JSON)
+            .when()
+            .get("/api/users/{id}", UUID.randomUUID())
+            .then()
+            .statusCode(400);
+    }
+
+    @Test
+    void createUser() {
+        // Get a test user from TestFixtures
+        User testUser = TestFixtures.getUsers().get(0);
+
+        // Create user and verify response
+        UserDto createdUser = given()
+            .contentType(ContentType.JSON)
+            .body(testUser)
+            .when()
+            .post("/api/users")
+            .then()
+            .statusCode(200)
+            .extract()
+            .as(UserDto.class);
+
+        assertThat(createdUser.getName()).isEqualTo(testUser.getName());
+        assertThat(createdUser.getId()).isNotNull();
+
+        // Verify user exists in the system
+        given()
+            .contentType(ContentType.JSON)
+            .when()
+            .get("/api/users/{id}", createdUser.getId())
+            .then()
+            .statusCode(200)
+            .body("name", equalTo(testUser.getName()));
+    }
 }
\ No newline at end of file
diff --git a/business/src/main/java/de/unibayreuth/se/taskboard/business/impl/UserServiceImpl.java b/business/src/main/java/de/unibayreuth/se/taskboard/business/impl/UserServiceImpl.java
new file mode 100644
index 0000000..0ee04ff
--- /dev/null
+++ b/business/src/main/java/de/unibayreuth/se/taskboard/business/impl/UserServiceImpl.java
@@ -0,0 +1,70 @@
+package de.unibayreuth.se.taskboard.business.impl;
+
+import de.unibayreuth.se.taskboard.business.domain.User;
+import de.unibayreuth.se.taskboard.business.exceptions.MalformedRequestException;
+import de.unibayreuth.se.taskboard.business.exceptions.UserNotFoundException;
+import de.unibayreuth.se.taskboard.business.exceptions.DuplicateNameException;
+import de.unibayreuth.se.taskboard.business.ports.UserPersistenceService;
+import de.unibayreuth.se.taskboard.business.ports.UserService;
+import lombok.RequiredArgsConstructor;
+
+import java.util.List;
+import java.util.UUID;
+
+import org.springframework.lang.NonNull;
+import org.springframework.stereotype.Service;
+
+@Service
+@RequiredArgsConstructor
+public class UserServiceImpl implements UserService {
+    private final UserPersistenceService userPersistenceService;
+
+    @Override
+    public void clear() {
+        userPersistenceService.clear();
+    }                   
+
+    @Override
+    @NonNull
+    public User create(@NonNull User user) throws MalformedRequestException {
+        if (user.getId() != null) {
+            throw new MalformedRequestException("User ID must not be set.");
+        }
+        return upsert(user);
+    }
+
+    @Override
+    @NonNull
+    public List<User> getAll() {
+        return userPersistenceService.getAll();
+    }
+
+    @Override
+    @NonNull
+    public User getById(@NonNull UUID id) throws UserNotFoundException {
+        return userPersistenceService.getById(id)
+                .orElseThrow(() -> new UserNotFoundException("User with ID " + id + " does not exist."));
+    }
+
+    @Override
+    @NonNull
+    public User upsert(@NonNull User user) throws UserNotFoundException, DuplicateNameException {
+        if (user.getId() != null) {
+            verifyUserExists(user.getId());
+        }
+        List<User> existingUsers = userPersistenceService.getAll();
+        for (User existingUser : existingUsers) {
+            if (existingUser.getName().equals(user.getName()) && 
+                !existingUser.getId().equals(user.getId())) {
+                throw new DuplicateNameException("User with name " + user.getName() + " already exists.");
+            }
+        }
+        return userPersistenceService.upsert(user);
+    }
+
+    private void verifyUserExists(@NonNull UUID id) throws UserNotFoundException {
+        userPersistenceService.getById(id)
+                .orElseThrow(() -> new UserNotFoundException("User with ID " + id + " does not exist."));
+    }
+}
+
diff --git a/business/src/main/java/de/unibayreuth/se/taskboard/business/ports/UserService.java b/business/src/main/java/de/unibayreuth/se/taskboard/business/ports/UserService.java
index 7412302..356cfc5 100644
--- a/business/src/main/java/de/unibayreuth/se/taskboard/business/ports/UserService.java
+++ b/business/src/main/java/de/unibayreuth/se/taskboard/business/ports/UserService.java
@@ -1,6 +1,26 @@
 package de.unibayreuth.se.taskboard.business.ports;
 
+import java.util.List;
+import java.util.UUID;
+
+import org.springframework.lang.NonNull;
+
+import de.unibayreuth.se.taskboard.business.domain.User;
+import de.unibayreuth.se.taskboard.business.exceptions.DuplicateNameException;
+import de.unibayreuth.se.taskboard.business.exceptions.MalformedRequestException;
+import de.unibayreuth.se.taskboard.business.exceptions.UserNotFoundException;
+
+/**
+ * Interface for the implementation of the user service that the business layer provides as a port.
+ */
 public interface UserService {
-    //TODO: Add user service interface that the controller uses to interact with the business layer.
-    //TODO: Implement the user service interface in the business layer, using the existing user persistence service.
+    void clear();
+    @NonNull
+    User create(@NonNull User user) throws MalformedRequestException;
+    @NonNull
+    List<User> getAll();
+    @NonNull
+    User getById(@NonNull UUID id) throws UserNotFoundException;
+    @NonNull
+    User upsert(@NonNull User user) throws UserNotFoundException, DuplicateNameException;
 }
